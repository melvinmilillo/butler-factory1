// –§–∞–π–ª: emergency-git-cleanup.js - –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ Git –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
import fs from 'fs/promises';
import path from 'path';

const POSTS_DIR = 'src/content/posts';

async function emergencyGitCleanup() {
    console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê Git –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...');
    
    try {
        const files = await fs.readdir(POSTS_DIR);
        const mdFiles = files.filter(file => file.endsWith('.md'));
        let deletedCount = 0;
        let brokenFiles = [];

        for (const file of mdFiles) {
            const filePath = path.join(POSTS_DIR, file);
            try {
                const content = await fs.readFile(filePath, 'utf-8');
                
                // –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê Git –ö–û–ù–§–õ–ò–ö–¢–´
                if (content.includes('<<<<<<< ') || 
                    content.includes('=======') || 
                    content.includes('>>>>>>> ')) {
                    
                    console.log(`üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∞–π–ª —Å Git –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º: ${file}`);
                    await fs.unlink(filePath);
                    deletedCount++;
                    brokenFiles.push(file);
                }
            } catch (error) {
                console.log(`üóëÔ∏è –£–¥–∞–ª—è—é –Ω–µ—á–∏—Ç–∞–µ–º—ã–π —Ñ–∞–π–ª: ${file}`);
                await fs.unlink(filePath);
                deletedCount++;
                brokenFiles.push(file);
            }
        }

        console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:\n        üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å Git –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏: ${deletedCount}\n        üìÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${mdFiles.length}`);
        
        if (brokenFiles.length > 0) {
            console.log(`\nüóÇÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:`);
            brokenFiles.forEach(file => console.log(`   - ${file}`));
        }
        
        console.log(`\nüéØ –ì–û–¢–û–í–û! Netlify —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.`);
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞:', error);
    }
}

emergencyGitCleanup();
