// –§–∞–π–ª: factory.js (–í–µ—Ä—Å–∏—è ¬´–ì–∏–±—Ä–∏–¥–Ω—ã–π –î–≤–∏–≥–∞—Ç–µ–ª—å¬ª)
import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –û–ü–ï–†–ê–¶–ò–ò ---
const TARGET_URL_MAIN = "https://butlerspb.ru";
const TARGET_URL_RENT = "https://butlerspb.ru/rent";
const TOPICS_FILE = 'topics.txt';
const POSTS_DIR = 'src/content/posts';
const SITE_URL = "https://butlerspb-blog.netlify.app";
const BRAND_NAME = "ButlerSPB";
const BRAND_BLOG_NAME = `–ë–ª–æ–≥ ${BRAND_NAME}`;
const BRAND_AUTHOR_NAME = `–≠–∫—Å–ø–µ—Ä—Ç ${BRAND_NAME}`;
const FALLBACK_IMAGE_URL = "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?q=80&w=2070&auto=format&fit=crop";

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ï–ô ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free"; // –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è OpenRouter
const GEMINI_MODEL_NAME = "gemini-2.5-pro"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞

// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const modelChoice = process.env.MODEL_CHOICE || 'gemini'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Gemini
const geminiApiKey = process.env.GEMINI_API_KEY_CURRENT;
const openRouterApiKey = process.env.OPENROUTER_API_KEY_CURRENT;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
let genAI;
if (modelChoice === 'gemini') {
    if (!geminiApiKey) {
        throw new Error("–ù–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á Gemini –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (GEMINI_API_KEY_CURRENT)!");
    }
    genAI = new GoogleGenerativeAI(geminiApiKey);
    console.log("‚ú® –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å Gemini...");
} else if (modelChoice === 'deepseek') {
    if (!openRouterApiKey) {
        throw new Error("–ù–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á OpenRouter –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (OPENROUTER_API_KEY_CURRENT)!");
    }
    console.log("üöÄ –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å DeepSeek —á–µ—Ä–µ–∑ OpenRouter...");
}

const ANCHORS = [
    `—É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ <a href="${TARGET_URL_RENT}" target="_blank" rel="nofollow">—Å–∞–π—Ç–µ ${BRAND_NAME}</a>`,
    `–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ <a href="${TARGET_URL_RENT}" target="_blank" rel="nofollow">–∑–¥–µ—Å—å</a>`,
    `–∫–∞–∫ —Å–æ–≤–µ—Ç—É—é—Ç —ç–∫—Å–ø–µ—Ä—Ç—ã –∏–∑ <a href="${TARGET_URL_MAIN}" target="_blank" rel="nofollow">${BRAND_NAME}</a>`,
    `–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ <a href="${TARGET_URL_RENT}" target="_blank" rel="nofollow">—ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</a>`,
    `–¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–æ–π - <a href="${TARGET_URL_RENT}" target="_blank" rel="nofollow">–æ—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ</a>`
];

async function isUrlAccessible(url) {
    if (typeof url !== 'string' || !url.startsWith('http')) return false;
    try {
        const response = await fetch(url, { method: 'HEAD', timeout: 5000 });
        return response.ok;
    } catch (error) {
        console.warn(`[!] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${url}. –û—à–∏–±–∫–∞: ${error.message}`);
        return false;
    }
}

function slugify(text) {
    const cleanedText = text.toString().replace(/[\x00-\x1F\x7F-\x9F]/g, "").trim();
    const from = "–∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è".split(' ');
    const to = "a b v g d e yo zh z i y k l m n o p r s t u f h c ch sh sch '' y ' e yu ya".split(' ');
    let newText = cleanedText.toLowerCase();
    for (let i = 0; i < from.length; i++) {
        newText = newText.replace(new RegExp(from[i], 'g'), to[i]);
    }
    return newText.replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
}

async function generateWithRetry(prompt, maxRetries = 4) {
    let delay = 5000;
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${openRouterApiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': BRAND_BLOG_NAME
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });

                if (!response.ok) {
                    if (response.status === 429) throw new Error(`429 Too Many Requests`);
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP –æ—Ç OpenRouter: ${response.status}`);
                }
                const data = await response.json();
                if (!data.choices || data.choices.length === 0) throw new Error("–û—Ç–≤–µ—Ç –æ—Ç API OpenRouter –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'choices'.");
                return data.choices[0].message.content;

            } else { // –õ–æ–≥–∏–∫–∞ –¥–ª—è Gemini
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            if (error.message.includes('503') || error.message.includes('429')) {
                console.warn(`[!] –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –∏–∑ ${maxRetries}. –ñ–¥—É ${delay / 1000}—Å...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2;
            } else {
                throw error;
            }
        }
    }
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${modelChoice} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
}

async function notifyIndexNow(url) {
    console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${url} –≤ IndexNow...`);
    const API_KEY = "d1b055ab1eb146d892169bbb2c96550e";
    const HOST = "butlerspb-blog.netlify.app";
    
    const payload = JSON.stringify({
        host: HOST,
        key: API_KEY,
        urlList: [url]
    });

    try {
        console.log("--- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å ---");
        await execa('curl', ['-X', 'POST', 'https://yandex.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        console.log("--- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Bing ---");
        await execa('curl', ['-X', 'POST', 'https://www.bing.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        console.log(`[‚úî] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    } catch (error) {
        console.error(`[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ IndexNow –¥–ª—è ${url}:`, error.stderr);
    }
}

async function generatePost(topic, slug, interlinks) {
    console.log(`[+] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: ${topic}`);
    
    const planPrompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è SEO-—Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}". –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å—Ç–∞—Ç—å—è –ø–∏—à–µ—Ç—Å—è –¥–ª—è –±–ª–æ–≥–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ButlerSPB.`;
    const plan = await generateWithRetry(planPrompt);

    const articlePrompt = `–ù–∞–ø–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é, –ø–æ–ª–µ–∑–Ω—É—é SEO-—Å—Ç–∞—Ç—å—é –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:\n\n${plan}\n\n–¢–µ–º–∞: "${topic}". –í–ê–ñ–ù–û: —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø–ª–∞–Ω—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Markdown –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (# –¥–ª—è H1, ## –¥–ª—è H2, ### –¥–ª—è H3). –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ButlerSPB. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.`;
    let articleText = await generateWithRetry(articlePrompt);

    articleText = articleText.replace(/!\[.*?\]\((?!http).*?\)/g, '');

    if (interlinks.length > 0) {
        let interlinkingBlock = '\n\n---\n\n## –ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ\n\n';
        interlinks.forEach(link => {
            interlinkingBlock += `*   [${link.title}](${link.url})\n`;
        });
        articleText += interlinkingBlock;
    }

    const paragraphs = articleText.split('\n\n');
    if (paragraphs.length > 2) {
        const randomIndex = Math.floor(Math.random() * (paragraphs.length - 2)) + 1;
        const randomAnchor = ANCHORS[Math.floor(Math.random() * ANCHORS.length)];
        paragraphs[randomIndex] += ` ${randomAnchor}`;
        articleText = paragraphs.join('\n\n');
    }
    
    const seoPrompt = `–î–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON-–æ–±—ä–µ–∫—Ç. –í–ê–ñ–ù–û: —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON-–æ–±—ä–µ–∫—Ç–æ–º. JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "title", "description". –ö–æ–Ω—Ç–µ–∫—Å—Ç: —ç—Ç–æ –±–ª–æ–≥ –∫–æ–º–ø–∞–Ω–∏–∏ ButlerSPB.`;
    let seoText = await generateWithRetry(seoPrompt);

    const match = seoText.match(/\{[\s\S]*\}/);
    if (!match) { throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏."); }
    const seoData = JSON.parse(match[0]);

    const reviewCount = Math.floor(Math.random() * (900 - 300 + 1)) + 300;
    const ratingValue = (Math.random() * (5.0 - 4.7) + 4.7).toFixed(1);

    const isImageOk = await isUrlAccessible(seoData.heroImage);
    const finalHeroImage = isImageOk ? seoData.heroImage : FALLBACK_IMAGE_URL;

    const fullSchema = {
      "@context": "https://schema.org",
      "@type": "HowTo",
      "name": seoData.title,
      "description": seoData.description,
      "image": { "@type": "ImageObject", "url": finalHeroImage },
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": ratingValue,
        "reviewCount": reviewCount,
        "bestRating": "5",
        "worstRating": "1"
      },
      "publisher": {
        "@type": "Organization",
        "name": BRAND_BLOG_NAME,
        "logo": { "@type": "ImageObject", "url": `${SITE_URL}/favicon.ico` }
      },
      "mainEntityOfPage": { "@type": "WebPage", "@id": `${SITE_URL}/blog/${slug}/` }
    };

    const frontmatter = `---
title: "${seoData.title.replace(/"/g, '\\"')}"
description: "${seoData.description.replace(/"/g, '\\"')}"
pubDate: "${new Date().toISOString()}"
author: "${BRAND_AUTHOR_NAME}"
heroImage: "${finalHeroImage}"
schema: ${JSON.stringify(fullSchema)}
---
`;
    return frontmatter + '\n' + articleText;
}

async function main() {
    const threadId = parseInt(process.env.THREAD_ID, 10) || 1;
    console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞...`);

    try {
        const BATCH_SIZE = parseInt(process.env.BATCH_SIZE, 10) || 1;
        
        const fileContent = await fs.readFile(TOPICS_FILE, 'utf-8');
        const allTopics = fileContent.split(/\r?\n/).map(topic => topic.trim()).filter(Boolean);

        const postsDir = path.join(process.cwd(), 'src', 'content', 'posts');
        await fs.mkdir(postsDir, { recursive: true });
        
        const existingFiles = await fs.readdir(postsDir);
        const existingSlugs = existingFiles.map(file => file.replace('.md', ''));
        
        let newTopics = allTopics.filter(topic => {
            const topicSlug = slugify(topic);
            return topicSlug && !existingSlugs.includes(topicSlug);
        });

        const totalThreads = parseInt(process.env.TOTAL_THREADS, 10) || 1;
        const topicsForThisThread = newTopics.filter((_, index) => index % totalThreads === (threadId - 1));

        if (topicsForThisThread.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.`);
            return;
        }
        
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–∞–π–¥–µ–Ω–æ ${topicsForThisThread.length} –Ω–æ–≤—ã—Ö —Ç–µ–º. –ë–µ—Ä—É –≤ —Ä–∞–±–æ—Ç—É –ø–µ—Ä–≤—ã–µ ${BATCH_SIZE}.`);

        let allPostsForLinking = [];
        for (const slug of existingSlugs) {
            const content = await fs.readFile(path.join(postsDir, `${slug}.md`), 'utf-8');
            const titleMatch = content.match(/title:\s*["']?(.*?)["']?$/m);
            if (titleMatch) {
                allPostsForLinking.push({ title: titleMatch[1], url: `/blog/${slug}/` });
            }
        }
        
        for (const topic of topicsForThisThread.slice(0, BATCH_SIZE)) { 
            try {
                const slug = slugify(topic);
                if (!slug) continue;
                
                let randomInterlinks = [];
                if (allPostsForLinking.length > 0) {
                    randomInterlinks = [...allPostsForLinking].sort(() => 0.5 - Math.random()).slice(0, 3);
                }
                
                const fullContent = await generatePost(topic, slug, randomInterlinks);
                await fs.writeFile(path.join(postsDir, `${slug}.md`), fullContent);
                console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] [‚úî] –°—Ç–∞—Ç—å—è "${topic}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
                
                const newUrl = `${SITE_URL}/blog/${slug}/`;
                await notifyIndexNow(newUrl);

                await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (e) {
                if (e.message.includes('429')) {
                    console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [!] –ö–≤–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.`);
                    process.exit(0);
                }
                console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ "${topic}": ${e.message}`);
                continue;
            }
        }
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [!] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
        process.exit(1);
    }
}

main();
