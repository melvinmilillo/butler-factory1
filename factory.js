// –§–∞–π–ª: factory.js (–í–µ—Ä—Å–∏—è ¬´–ú–Ω–æ–≥–æ–ø–æ—Ç–æ–∫¬ª)
import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';

const TARGET_URL_MAIN = "https://butlerspb.ru";
const TARGET_URL_RENT = "https://butlerspb.ru/rent";
const TOPICS_FILE = 'topics.txt';
const POSTS_DIR = 'src/content/posts';
const SITE_URL = "https://butlerspb-blog.netlify.app";
const BRAND_NAME = "ButlerSPB";
const BRAND_BLOG_NAME = `–ë–ª–æ–≥ ${BRAND_NAME}`;
const BRAND_AUTHOR_NAME = `–≠–∫—Å–ø–µ—Ä—Ç ${BRAND_NAME}`;
const FALLBACK_IMAGE_URL = "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?q=80&w=2070&auto-format&fit=crop";

// --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º API-–∫–ª—é—á –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç ---
const apiKey = process.env.GEMINI_API_KEY_CURRENT;
if (!apiKey) {
    throw new Error("–ù–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (GEMINI_API_KEY_CURRENT)!");
}

const genAI = new GoogleGenerativeAI(apiKey);
const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

// ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ANCHORS, isUrlAccessible, slugify, generateWithRetry, generatePost - –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async function generatePost(topic, slug, interlinks) {
    // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
}

// --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: main() —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–≤–æ—é "–ø–æ—Ä—Ü–∏—é" –∑–∞–¥–∞—á ---
async function main() {
    const threadId = process.env.THREAD_ID || 'main';
    console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞...`);

    try {
        const BATCH_SIZE = parseInt(process.env.BATCH_SIZE, 10) || 1; // –ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –±–µ—Ä–µ—Ç —Å–≤–æ—é –ø–∞—á–∫—É
        
        const fileContent = await fs.readFile(TOPICS_FILE, 'utf-8');
        const allTopics = fileContent.split(/\r?\n/).map(topic => topic.trim()).filter(Boolean);

        const postsDir = path.join(process.cwd(), 'src', 'content', 'posts');
        await fs.mkdir(postsDir, { recursive: true });
        
        const existingFiles = await fs.readdir(postsDir);
        const existingSlugs = existingFiles.map(file => file.replace('.md', ''));
        
        let newTopics = allTopics.filter(topic => {
            const topicSlug = slugify(topic);
            return topicSlug && !existingSlugs.includes(topicSlug);
        });

        // --- –ù–û–í–´–ô –ë–õ–û–ö: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏ ---
        const totalThreads = parseInt(process.env.TOTAL_THREADS, 10) || 1;
        const topicsForThisThread = newTopics.filter((_, index) => index % totalThreads === (threadId - 1));
        // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê ---

        if (topicsForThisThread.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.`);
            return;
        }
        
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–∞–π–¥–µ–Ω–æ ${topicsForThisThread.length} –Ω–æ–≤—ã—Ö —Ç–µ–º. –ë–µ—Ä—É –≤ —Ä–∞–±–æ—Ç—É –ø–µ—Ä–≤—ã–µ ${BATCH_SIZE}.`);

        let allPostsForLinking = []; // –ü–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –ø–∞—á–∫–∏
        
        for (const topic of topicsForThisThread.slice(0, BATCH_SIZE)) { 
            try {
                const slug = slugify(topic);
                if (!slug) continue;
                
                const fullContent = await generatePost(topic, slug, []); // –ü–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–∞–µ–º
                await fs.writeFile(path.join(postsDir, `${slug}.md`), fullContent);
                console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] [‚úî] –°—Ç–∞—Ç—å—è "${topic}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
                await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (e) {
                if (e.message.includes('429')) {
                    console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [!] –ö–≤–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.`);
                    process.exit(0); // –ó–∞–≤–µ—Ä—à–∞–µ–º—Å—è —à—Ç–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –≤–µ—Å—å –±–∏–ª–¥
                }
                console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ "${topic}": ${e.message}`);
                continue;
            }
        }
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [!] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
        process.exit(1);
    }
}

main();
```</details>

#### **–®–∞–≥ 2: –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è "–ö–æ–Ω–≤–µ–π–µ—Ä–∞" (`.github/workflows/factory.yml`)**

–ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—à –≤–æ—Ä–∫—Ñ–ª–æ—É. –í–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–Ω —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å **–º–∞—Ç—Ä–∏—Ü—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á**.

1.  –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `.github/workflows/factory.yml`.
2.  **–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç–µ** –≤—Å—ë –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
3.  **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ** –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–æ —ç—Ç–æ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π, **–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π** –∫–æ–¥.

<details>
<summary><strong>–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –§–ò–ù–ê–õ–¨–ù–´–ô –∫–æ–¥ –¥–ª—è `.github/workflows/factory.yml` (–í–µ—Ä—Å–∏—è ¬´–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –£–¥–∞—Ä¬ª)</strong></summary>

```yaml
name: üöÄ Content Factory (Parallel Strike)

on:
  workflow_dispatch:
    inputs:
      batch_size_per_thread:
        description: '–°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ö–ê–ñ–î–´–ú –ø–æ—Ç–æ–∫–æ–º?'
        required: true
        default: '10'
      threads:
        description: '–°–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç—å –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û?'
        required: true
        default: '5'

jobs:
  # --- –ó–ê–î–ê–ß–ê ‚Ññ1: –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ ---
  generate:
    permissions:
      contents: write
      
    runs-on: ubuntu-latest
    
    strategy:
      # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∑–∞–¥–∞—á. –ï—Å–ª–∏ –æ–¥–Ω–∞ —É–ø–∞–¥–µ—Ç, –¥—Ä—É–≥–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç—É.
      fail-fast: false
      matrix:
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç 1 –¥–æ N, –≥–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        thread: ${{ fromJson(format('[{0}]', range(1, github.event.inputs.threads + 1))) }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üì¶ Install dependencies
        run: npm install

      - name: üè≠ Run Content Factory (Thread ${{ matrix.thread }})
        env:
          # –ü–µ—Ä–µ–¥–∞–µ–º API-–∫–ª—é—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä—É –ø–æ—Ç–æ–∫–∞
          GEMINI_API_KEY_CURRENT: ${{ secrets[format('GEMINI_API_KEY_{0}', matrix.thread)] }}
          BATCH_SIZE: ${{ github.event.inputs.batch_size_per_thread }}
          TOTAL_THREADS: ${{ github.event.inputs.threads }}
          THREAD_ID: ${{ matrix.thread }}
        run: |
          npm run factory
          
  # --- –ó–ê–î–ê–ß–ê ‚Ññ2: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ IndexNow (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –í–°–ï–• –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤) ---
  publish-and-notify:
    # –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –∂–¥–µ—Ç, –ø–æ–∫–∞ –í–°–ï –∑–∞–¥–∞—á–∏ –∏–∑ 'generate' –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
    needs: generate
    # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —É–ø–∞–ª–∏, –Ω–æ –µ—Å—Ç—å —á—Ç–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    if: always()

    permissions:
      contents: write
      
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: üöÄ Commit and Push All New Posts
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions-bot@github.com'
          
          # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤, –≤—ã—Ö–æ–¥–∏–º
          if [[ -z $(git status --porcelain) ]]; then
            echo "‚úÖ –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            exit 0
          fi

          echo "üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ —Å–æ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤. –ü—É–±–ª–∏–∫—É—é..."
          git add src/content/posts/*.md
          git commit -m "üöÄ –ê–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è: –ø–∞—á–∫–∞ —Å—Ç–∞—Ç–µ–π —Å–æ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤"
          git pull --rebase
          git push

      - name: üì¢ Notify IndexNow (Yandex & Bing)
        run: |
          # ... (—ç—Ç–æ—Ç —à–∞–≥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏)
